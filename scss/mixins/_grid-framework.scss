// Framework grid generation
//
// Used only by Bootstrap to generate the correct number of grid classes given
// any value of `$grid-columns`.

@mixin make-grid-columns($breakpoint-columns: $grid-columns, $gutter: $grid-gutter-width, $offset: $grid-outer-width, $mx-width: $container-max-widths, $breakpoints: $grid-breakpoints) {
  // Common properties for all breakpoints
  %grid-column {
    position: relative;
    width: 100%;
  }

  @each $breakpoint, $columns in $breakpoint-columns {

    $infix: breakpoint-infix($breakpoint, $breakpoints);

    // Allow columns to stretch full width below their breakpoints
    
    .col#{$infix},
    .col#{$infix}-auto {
      @extend %grid-column;
    }

    @include media-breakpoint-up($breakpoint, $breakpoints) {
      @for $i from 1 through $columns {
        .col#{$infix}-#{$i} {
          padding-right: map-get($gutter,$breakpoint) / 2;
          padding-left: map-get($gutter,$breakpoint) / 2;
        }
      }
      // Provide basic `.col-{bp}` classes for equal-width flexbox columns
      .col#{$infix} {
        flex-basis: 0;
        flex-grow: 1;
        max-width: 100%;
      }
      .col#{$infix}-auto {
        flex: 0 0 auto;
        width: auto;
        max-width: 100%; // Reset earlier grid tiers
      }

      @for $i from 1 through $columns {
        .col#{$infix}-#{$i} {
          @include make-col($i, $columns);
        }
      }

      .order#{$infix}-first { order: -1; }

      .order#{$infix}-last { order: $columns + 1; }

      @for $i from 0 through $columns {
        .order#{$infix}-#{$i} { order: $i; }
      }

      // `$columns - 1` because offsetting by the width of an entire row isn't possible
      @for $i from 0 through ($columns - 1) {
        @if not ($infix == "" and $i == 0) { // Avoid emitting useless .offset-0
          .offset#{$infix}-#{$i} {
            @include make-col-offset($i, $columns);
          }
        }
      }

      // starts: Creating Grid overlay
      :root {
        --offset: #{ map-get($offset,$breakpoint)}; //outer-wdith
        --columns: #{$columns};
        --gutter: #{ map-get($gutter,$breakpoint)};
        --baseline: 3rem;
        --baseline-shift: 300px;
        --color: hsla(calc(var(--columns) * var(--columns)), 80%, 72%, 0.25);
        --color-text: hsla(204, 80%, 72%, 1);
        --media-query: '#{$breakpoint} - #{$columns} coloums';

        --repeating-width: calc(100% / var(--columns));
        --column-width: calc((100% / var(--columns)) - var(--gutter));
        --background-width: calc(100% + var(--gutter));
        --background-columns: repeating-linear-gradient(
          to right,
          var(--color),
          var(--color) var(--column-width),
          transparent var(--column-width),
          transparent var(--repeating-width)
        );
        --background-baseline: repeating-linear-gradient(
          to bottom,
          var(--color),
          var(--color) 2px,
          transparent 1px,
          transparent var(--baseline)
        );
      }
      html::before {
        position: absolute;
        top: 0;
        right: 0;
        bottom: 0;
        left: 0;
        margin-right: auto;
        margin-left: auto;
        width: calc(100% - var(--offset));
        max-width: calc(#{map-get($mx-width, $breakpoint)} - var(--offset));
        min-height: 100vh;
        content: '';
        background-image: var(--background-columns), var(--background-baseline);
        background-size: var(--background-width) 100%;
        z-index: 1000;
        pointer-events: none;
        visibility: hidden; 
      }
      
      html::after {
        content: var(--media-query);
        position: fixed;
        top: 1rem;
        left: 1rem;
        font-family: -apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,Oxygen-Sans,Ubuntu,Cantarell,"Helvetica Neue",sans-serif;
        color: var(--color-text);
        background: white;
        border: 1px solid grey;
        visibility: hidden; 
      }
      //ends: grid overlay

    }
  }
}
